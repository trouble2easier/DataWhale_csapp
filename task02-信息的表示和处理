第二章信息的存储和表示

主要分为三个部分分别为信息的存储，整数的表示和运算，浮点数的表示。

2.1信息的存储

8bit的块或者字节是最小的可寻址的内存单位。

二进制，10进制，16进制的互相转换；

字长：指针数据的标称大小，决定虚拟地址空间的最大大小。一般而言的x32位机器，x64位里的32,64就是指字长了。

64位机器编译的程序可以向32位兼容，但反过来却不行。

多字节的程序对象，如何排列这些字节，分为大端和小端字节序。小端是按照从最低有效字节到最高有效字节存储，大端相反。

16进制的0x01234567

地址    0x100  0x101  0x102  0x103

大端    01      23    45      67

小端    67      45      23      01

字符串：以0字符结尾的字符数组

位向量的运算：~,&,|,^

逻辑运算：||,&&,!

左移运算<<

算术右移，逻辑右移>>，前者高位补0，后者高位补1

2.2整数的表示

无符号整数：二进制形式

有符号整数(补码表示)：假设字长是w，那么整数的范围为-2的(w-1)次方，最大为2的(w-1)次方-1。其中10...0(w-1个0)表示最小小整数。

无符号数和补码之间的转换：对于0到2的(w-1)次方，互转无变化，其他需要减去2的w次方或者加上2的w次方。

C语言中的整数采用补码表示，无符号常量后缀加u

扩展数字的位数:

无符号数的零扩展：前面补0

补码的符号扩展 ：前面补1

截断数字：减少数字的位数，不论是无符号数的截断还是补码的截断，都是从左边开始截断k位。

2.3整数运算：无符号数的加法，补码的加法，无符号数的乘法，补码的乘法，乘以常数，注意溢出问题

2.4浮点数

浮点数的表示，分为三部分：符号s，阶码E，尾数M。

IEEE浮点数标准形式：(-1)^s*M*2^E，其中s为0表示负数，为1表示正数。

c语言的单精度格式，s，M，E二进制形式分别为1,8,23位；双精度格式的s,M,E分别为1,11,52位。

根据

舍入方式，浮点运算由于表示方式的限制，只能近似的表达实数运算，通过舍入的方式找到最匹配值。方式分为四种：向偶数舍入，向零舍入，向下舍入，向上舍入。
